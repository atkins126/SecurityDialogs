unit Security.Matrix;

interface

uses
  System.SysUtils, System.Classes, Vcl.ExtCtrls, System.UITypes, Vcl.StdCtrls, Vcl.Forms

    , Security.Matrix.Interfaces
    , Security.Matrix.View
    ;

type
  TPermissionNotifyEvent = Security.Matrix.Interfaces.TMatrixNotifyEvent;
  TResultNotifyEvent     = Security.Matrix.Interfaces.TResultNotifyEvent;
  TSecurityMatrixView    = Security.Matrix.View.TSecurityMatrixView;

  TSecurityMatrix = class(TComponent)
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;

  strict private
    FView: TSecurityMatrixView;

    FID           : Int64;
    FUpdatedAt    : TDateTime;
    FNameMatrix   : String;
    FEmail        : String;
    FActive       : Boolean;
    FPassword     : String;
    FMatrixID     : Integer;
    FIsMatrix     : Boolean;
    FChangedMatrix: Boolean;

    FOnMatrix: TMatrixNotifyEvent;
    FOnResult: TResultNotifyEvent;

    { Strict private declarations }
    procedure SetComputerIP(const Value: string);
    procedure SetServerIP(const Value: string);
    procedure SetSigla(const Value: string);
    procedure setUpdatedIn(const Value: string);
    procedure SetVersion(const Value: string);

    function getComputerIP: string;
    function getLogo: TImage;
    function getServerIP: string;
    function getSigla: string;
    function getUpdatedIn: string;
    function getVersion: string;
  private
    { Private declarations }
  protected
    { Protected declarations }
  public
    { Public declarations }
    function View: iMatrixView;

    property Logo: TImage read getLogo;

    procedure Execute;
  public
    { Published hide declarations }
    property ServerIP  : string read getServerIP write SetServerIP;
    property ComputerIP: string read getComputerIP write SetComputerIP;
    property Sigla     : string read getSigla write SetSigla;
    property Version   : string read getVersion write SetVersion;
    property UpdatedIn : string read getUpdatedIn write setUpdatedIn;
  published
    { Published declarations - Properties }
    property ID        : Int64 read FID write FID;
    property UpdatedAt : TDateTime read FUpdatedAt write FUpdatedAt;
    property NameMatrix: String read FNameMatrix write FNameMatrix;
    property Email     : String read FEmail write FEmail;
    property Active    : Boolean read FActive write FActive;
    property Password  : String read FPassword write FPassword;
    property MatrixID  : Integer read FMatrixID write FMatrixID;
    property IsMatrix  : Boolean read FIsMatrix write FIsMatrix;

    { Published declarations - Events }
    property OnMatrix: TMatrixNotifyEvent read FOnMatrix write FOnMatrix;
    property OnResult: TResultNotifyEvent read FOnResult write FOnResult;
  end;

implementation

uses
  Security.Internal;

{ TSecurityManage }

constructor TSecurityMatrix.Create(AOwner: TComponent);
begin
  FView := TSecurityMatrixView.Create(Screen.FocusedForm);
  inherited;
end;

destructor TSecurityMatrix.Destroy;
begin
  FreeAndNil(FView);
  inherited;
end;

procedure TSecurityMatrix.SetComputerIP(const Value: string);
begin
  FView.LabelIPComputerValue.Caption := Value;
end;

function TSecurityMatrix.getComputerIP: string;
begin
  Result := FView.LabelIPComputerValue.Caption;
end;

procedure TSecurityMatrix.SetServerIP(const Value: string);
begin
  FView.LabelIPServerValue.Caption := Value;
end;

function TSecurityMatrix.getServerIP: string;
begin
  Result := FView.LabelIPServerValue.Caption;
end;

procedure TSecurityMatrix.SetSigla(const Value: string);
begin
  FView.PanelTitleLabelSigla.Caption := Value;
end;

function TSecurityMatrix.getSigla: string;
begin
  Result := FView.PanelTitleLabelSigla.Caption;
end;

procedure TSecurityMatrix.setUpdatedIn(const Value: string);
begin
  FView.PanelTitleAppInfoUpdatedValue.Caption := Value;
end;

function TSecurityMatrix.getUpdatedIn: string;
begin
  Result := FView.PanelTitleAppInfoUpdatedValue.Caption;
end;

procedure TSecurityMatrix.SetVersion(const Value: string);
begin
  FView.PanelTitleAppInfoVersionValue.Caption := Value;
end;

function TSecurityMatrix.getVersion: string;
begin
  Result := FView.PanelTitleAppInfoVersionValue.Caption;
end;

function TSecurityMatrix.getLogo: TImage;
begin
  Result := FView.ImageLogo;
end;

function TSecurityMatrix.View: iMatrixView;
begin
  Result := FView;
end;

procedure TSecurityMatrix.Execute;
begin
  Internal.Required(Self.FOnMatrix);

  FView.OnMatrix := Self.FOnMatrix;
  FView.OnResult := Self.FOnResult;

  FView.Show;
end;

end.
